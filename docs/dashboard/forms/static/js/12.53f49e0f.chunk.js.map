{"version":3,"sources":["components/SellerProperty/Property/Loadable.js","components/SellerProperty/Listing/Form/index.js"],"names":["LoadableComponent","Loadable","loader","loading","Loader","ListPropertyForm","props","properties","isLoading","fetchSellerPropertyForms","error","useEffect","toastr","map","property","index","forms","Forms","propertyId","PropertyId","propertyIndex","key","structuredSelector","createStructuredSelector","state","_get","sellerPropertyForms","mapDispatchToProps","connect"],"mappings":"sLAOeA,EAJWC,IAAS,CACjCC,OAAQ,kBAAM,iCACdC,QAASC,M,iBCJX,iDAiBO,IAAMC,EAAmB,SAC9BC,GAC0C,IAClCC,EAA2DD,EAA3DC,WAAYC,EAA+CF,EAA/CE,UAAWC,EAAoCH,EAApCG,yBAA0BC,EAAUJ,EAAVI,MAazD,OAXAC,qBAAU,WACRF,MAEC,IAEHE,qBAAU,WACJD,GACFE,SAAOF,MAAM,0BAEd,CAACA,IAGF,gBAAC,WAAD,KACGF,GAAa,gBAACJ,EAAA,EAAD,MACbG,EAAWM,KAAI,SAACC,EAAUC,GAAW,IACrBC,EAAkCF,EAAzCG,MAA0BC,EAAeJ,EAA3BK,WAEtB,OACE,gBAAC,EAAD,CACEC,cAAeL,EACfD,SAAUA,EACVE,MAAOA,EACPK,IAAKH,SAQXI,EAAqBC,YAAyB,CAClDhB,WAAY,SAAAiB,GAAK,OACfC,IAAKD,EAAO,CAAC,sBAAuB,gBAAiB,cAAe,KACtEhB,UAAW,SAAAgB,GAAK,OAAIA,EAAME,oBAAoBlB,WAC9CE,MAAO,SAAAc,GAAK,OAAIA,EAAME,oBAAoBhB,SAGtCiB,EAAqB,CAAElB,8BAEbmB,4BACdN,EACAK,EAFcC,CAGdvB","file":"static/js/12.53f49e0f.chunk.js","sourcesContent":["import Loadable from 'react-loadable';\nimport Loader from 'components/Loader';\n\nconst LoadableComponent = Loadable({\n  loader: () => import('./index'),\n  loading: Loader,\n});\nexport default LoadableComponent;\n","// @flow\nimport * as React from 'react';\nimport { fetchSellerPropertyForms } from './redux/Actions';\nimport { toastr } from 'react-redux-toastr';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport PropertyComponent from 'components/SellerProperty/Property/Loadable';\nimport Loader from 'components/Loader';\nimport _get from 'lodash/get';\n\ntype Props = {\n  properties: Array<Object>,\n  fetchSellerPropertyForms: Function,\n  error: string,\n  isLoading: boolean,\n};\n\nexport const ListPropertyForm = (\n  props: Props,\n): React.Element<typeof React.Fragment> => {\n  const { properties, isLoading, fetchSellerPropertyForms, error } = props;\n\n  useEffect(() => {\n    fetchSellerPropertyForms();\n    // eslint-disable-next-line react-hooks/exhaustive-deps,\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      toastr.error('Something went wrong');\n    }\n  }, [error]);\n\n  return (\n    <React.Fragment>\n      {isLoading && <Loader />}\n      {properties.map((property, index) => {\n        const { Forms: forms, PropertyId: propertyId } = property;\n\n        return (\n          <PropertyComponent\n            propertyIndex={index}\n            property={property}\n            forms={forms}\n            key={propertyId}\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst structuredSelector = createStructuredSelector({\n  properties: state =>\n    _get(state, ['sellerPropertyForms', 'propertyForms', 'Properties'], []),\n  isLoading: state => state.sellerPropertyForms.isLoading,\n  error: state => state.sellerPropertyForms.error,\n});\n\nconst mapDispatchToProps = { fetchSellerPropertyForms };\n\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(ListPropertyForm): React.AbstractComponent<Props>);\n"],"sourceRoot":""}