{"version":3,"sources":["components/Offers/Step/Content.js","components/Offers/Step/Step200/index.js"],"names":["structuredSelector","createStructuredSelector","urls","state","_get","file","error","isLoading","isFormSaved","formData","isFileUploaded","mapDispatchToProps","saveFormData","saveFormFiles","getFormFiles","connect","withErrorBoundary","props","history","useHistory","user","React","UserContext","isGoingToExit","setExitStatus","formId","offerId","endpoint","buildStep1EndPoint","formBaseEndpoint","formSubmissionEndpoint","redirectOptions","pathname","APP_PATHS","offers","dashboard","saveData","survey","formTemplate","isFormSubmitted","data","formatSurveyData","currentPageNo","ItemType","FORM_ITEM_TYPE","offer","toastr","SURVEYS_ERROR_MESSAGE","COMMON","message","FORM_SUBMITTED","_isEmpty","uploadFilesHandler","success","SURVEYS_SUCCESS_MESSAGE","FORM_DATA_SAVED_SUCCESS","FORM_DATA_SAVED_FAILURE","push","className","onFilesUploadHandler","options","onFilesUploadCallbackHandler","onCompleteHandler","onPageChangedHandler","onSaveExitHandler","Step200","step"],"mappings":"4QAgLA,IAAMA,EAAqBC,YAAyB,CAClDC,KAAM,SAAAC,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,UACpCE,KAAM,SAAAF,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,UACpCG,MAAO,SAAAH,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,WACrCI,UAAW,SAAAJ,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,eACzCK,YAAa,SAAAL,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,iBAC3CM,SAAU,SAAAN,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,OAAQ,cAChDO,eAAgB,SAAAP,GAAK,OAAIC,IAAKD,EAAO,CAAC,OAAQ,sBAG1CQ,EAAqB,CACzBC,iBACAC,kBACAC,kBAEcC,sBACdf,EACAW,EAFcI,CAGdC,aA/IF,SAA0BC,GACxB,IAAMC,EAAUC,cACVC,EAAOC,aAAiBC,KAC9B,EAAuCD,YAAe,GAAtD,mBAAOE,EAAP,KAAsBC,EAAtB,KAEEC,EAWER,EAXFQ,OACAC,EAUET,EAVFS,QACAd,EASEK,EATFL,aACAC,EAQEI,EARFJ,cACAX,EAOEe,EAPFf,KACAY,EAMEG,EANFH,aACAR,EAKEW,EALFX,MACAD,EAIEY,EAJFZ,KACAI,EAGEQ,EAHFR,SACAD,EAEES,EAFFT,YACAE,EACEO,EADFP,eAEIiB,EAAWC,YAAmB,CAAEH,SAAQC,YACtCG,EAA6CF,EAA7CE,iBAAkBC,EAA2BH,EAA3BG,uBAGpBC,EAAkB,CACtBC,SAHe5B,IAAKgB,EAAM,YAAY,GAGMa,IAAUC,OAAhCD,IAAUE,WAG5BC,EAAW,SAACC,EAAQV,EAAUW,GAClC,IAAKC,YAAgB9B,GACnB,IACE,IAAM+B,EAAOC,YAAiBJ,EAAQC,GACtC,OAAO1B,EAAa,CAClBe,WACAU,OAAQ,CACNK,cAAe,EACfF,OACAG,SAAUC,IAAeC,SAG7B,MAAOvC,GAEP,YADAwC,SAAOxC,MAAMyC,IAAsBC,OAAQ1C,EAAM2C,SAIrDH,SAAOxC,MACLyC,IAAsBC,OACtBD,IAAsBG,iBAoE1B,OA1CA7B,aAAgB,WACV8B,IAASjD,IAtBbkD,YAAmB/C,EAAMH,EAAMW,KA4B9B,CAACX,IAEJmB,aAAgB,WACVf,GACFwC,SAAOxC,MAAMyC,IAAsBC,UAEpC,CAAC1C,IAEJe,aAAgB,WACVb,IACY,OAAVF,EACFwC,SAAOO,QACLC,IAAwBN,OACxBM,IAAwBC,yBAG1BT,SAAOxC,MACLyC,IAAsBC,OACtBD,IAAsBS,4BAI3B,CAAChD,IAEJa,aAAgB,WAEZE,GACAf,KACG2C,IAASjD,IAASQ,GAAmByC,IAASjD,KAEjDgB,EAAQuC,KAAK1B,KAGd,CAACR,EAAef,EAAaN,EAAMQ,IAGpC,uBAAKgD,UAAU,aACb,gBAAC,IAAD,CACE/B,SAAUE,EACV8B,qBAlDuB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9B,OAAOC,YAA6BD,EAAS9C,IAkDzCgD,kBAjEoB,SAACzB,EAAQC,GACjCF,EAASC,EAAQP,EAAwBQ,GACzCd,GAAc,IAgEVuC,qBA7DuB,SAAC1B,EAAQC,GACpCF,EAASC,EAAD,UAAYR,GAAoBS,IA6DpC0B,kBA1DoB,SAAC3B,EAAQC,GACjCF,EAASC,EAAD,UAAYR,GAAoBS,GACxCd,GAAc,Y,iCCjHlB,qCAgBeyC,UANC,SAAChD,GACf,IAAQS,EAA0BT,EAA1BS,QAASwC,EAAiBjD,EAAjBiD,KAAMzC,EAAWR,EAAXQ,OAEvB,OAAO,kBAAC,IAAD,CAASC,QAASA,EAASwC,KAAMA,EAAMzC,OAAQA","file":"static/js/1.d72bf1fe.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { Element, AbstractComponent } from 'react';\nimport FormBuilder from 'components/FormBuilder';\nimport {\n  saveFormData,\n  saveFormFiles,\n  getFormFiles,\n} from 'components/FormBuilder/redux/Actions';\nimport { connect } from 'react-redux';\nimport { FORM_ITEM_TYPE } from 'components/FormBuilder/Constants';\nimport { createStructuredSelector } from 'reselect';\nimport _isEmpty from 'lodash/isEmpty';\nimport _get from 'lodash/get';\nimport {\n  SURVEYS_ERROR_MESSAGE,\n  SURVEYS_SUCCESS_MESSAGE,\n} from 'components/FormBuilder/Messages';\nimport {\n  formatSurveyData,\n  isFormSubmitted,\n  uploadFilesHandler,\n  onFilesUploadCallbackHandler,\n} from 'helpers/SurveyJS';\nimport { toastr } from 'react-redux-toastr';\nimport { withErrorBoundary } from 'components/ErrorBoundary';\nimport { buildStep1EndPoint } from 'helpers/Step';\nimport { useHistory } from 'react-router-dom';\nimport { APP_PATHS } from '../../../shared/Consts';\nimport UserContext from 'contexts/UserContext';\n\ntype PropsWithoutRedux = {\n  offerId: string,\n  step: string,\n  formId: string,\n};\n\ntype Props = {\n  ...PropsWithoutRedux,\n  saveFormData: Function,\n  saveFormFiles: Function,\n  getFormFiles: Function,\n  updateOfferStep: Function,\n  urls: Array<Object>,\n  file: Array<Object>,\n  error: string,\n  isFormSaved: boolean,\n  formData: Object,\n  isFileUploaded: boolean,\n};\n\nfunction OfferFormBuilder(props: Props): Element<'div'> {\n  const history = useHistory();\n  const user = React.useContext(UserContext);\n  const [isGoingToExit, setExitStatus] = React.useState(false);\n  const {\n    formId,\n    offerId,\n    saveFormData,\n    saveFormFiles,\n    urls,\n    getFormFiles,\n    error,\n    file,\n    formData,\n    isFormSaved,\n    isFileUploaded,\n  } = props;\n  const endpoint = buildStep1EndPoint({ formId, offerId });\n  const { formBaseEndpoint, formSubmissionEndpoint } = endpoint;\n  const isSeller = _get(user, 'IsSeller', false);\n\n  const redirectOptions = {\n    pathname: !isSeller ? APP_PATHS.dashboard : APP_PATHS.offers,\n  };\n\n  const saveData = (survey, endpoint, formTemplate) => {\n    if (!isFormSubmitted(formData)) {\n      try {\n        const data = formatSurveyData(survey, formTemplate);\n        return saveFormData({\n          endpoint,\n          survey: {\n            currentPageNo: 0,\n            data,\n            ItemType: FORM_ITEM_TYPE.offer,\n          },\n        });\n      } catch (error) {\n        toastr.error(SURVEYS_ERROR_MESSAGE.COMMON, error.message);\n        return;\n      }\n    }\n    toastr.error(\n      SURVEYS_ERROR_MESSAGE.COMMON,\n      SURVEYS_ERROR_MESSAGE.FORM_SUBMITTED,\n    );\n  };\n\n  const uploadFiles = () => {\n    uploadFilesHandler(file, urls, saveFormFiles);\n  };\n\n  const onCompleteHandler = (survey, formTemplate) => {\n    saveData(survey, formSubmissionEndpoint, formTemplate);\n    setExitStatus(true);\n  };\n\n  const onPageChangedHandler = (survey, formTemplate) => {\n    saveData(survey, `${formBaseEndpoint}`, formTemplate);\n  };\n\n  const onSaveExitHandler = (survey, formTemplate) => {\n    saveData(survey, `${formBaseEndpoint}`, formTemplate);\n    setExitStatus(true);\n  };\n\n  const onFilesUploadHandler = ({ options }) => {\n    return onFilesUploadCallbackHandler(options, getFormFiles);\n  };\n\n  React.useEffect(() => {\n    if (_isEmpty(urls)) {\n      return;\n    }\n\n    uploadFiles();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [urls]);\n\n  React.useEffect(() => {\n    if (error) {\n      toastr.error(SURVEYS_ERROR_MESSAGE.COMMON);\n    }\n  }, [error]);\n\n  React.useEffect(() => {\n    if (isFormSaved) {\n      if (error === null)\n        toastr.success(\n          SURVEYS_SUCCESS_MESSAGE.COMMON,\n          SURVEYS_SUCCESS_MESSAGE.FORM_DATA_SAVED_SUCCESS,\n        );\n      else\n        toastr.error(\n          SURVEYS_ERROR_MESSAGE.COMMON,\n          SURVEYS_ERROR_MESSAGE.FORM_DATA_SAVED_FAILURE,\n        );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFormSaved]);\n\n  React.useEffect(() => {\n    if (\n      isGoingToExit &&\n      isFormSaved &&\n      ((!_isEmpty(urls) && isFileUploaded) || _isEmpty(urls))\n    ) {\n      history.push(redirectOptions);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isGoingToExit, isFormSaved, urls, isFileUploaded]);\n\n  return (\n    <div className=\"container\">\n      <FormBuilder\n        endpoint={formBaseEndpoint}\n        onFilesUploadHandler={onFilesUploadHandler}\n        onCompleteHandler={onCompleteHandler}\n        onPageChangedHandler={onPageChangedHandler}\n        onSaveExitHandler={onSaveExitHandler}\n      />\n    </div>\n  );\n}\n\nconst structuredSelector = createStructuredSelector({\n  urls: state => _get(state, ['form', 'urls']),\n  file: state => _get(state, ['form', 'file']),\n  error: state => _get(state, ['form', 'error']),\n  isLoading: state => _get(state, ['form', 'isLoading']),\n  isFormSaved: state => _get(state, ['form', 'isFormSaved']),\n  formData: state => _get(state, ['form', 'form', 'FormData']),\n  isFileUploaded: state => _get(state, ['form', 'isFileUploaded']),\n});\n\nconst mapDispatchToProps = {\n  saveFormData,\n  saveFormFiles,\n  getFormFiles,\n};\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(withErrorBoundary(OfferFormBuilder)): AbstractComponent<PropsWithoutRedux>);\n","// @flow\nimport React from 'react';\nimport type { Element } from 'react';\nimport Content from '../Content';\n\ntype Props = {\n  offerId: string,\n  step: string,\n  formId: string,\n};\n\nconst Step200 = (props: Props): Element<typeof Content> => {\n  const { offerId, step, formId } = props;\n\n  return <Content offerId={offerId} step={step} formId={formId} />;\n};\n\nexport default Step200;\n"],"sourceRoot":""}