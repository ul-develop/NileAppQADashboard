{"version":3,"sources":["components/Contingencies/ActionButton.js","components/Contingencies/ContingenciesTable.js","components/Contingencies/helper.js","components/Contingencies/Contingencies.js"],"names":["ActionButton","offer","useState","anchorEl","setAnchorEl","offerId","_get","removalForm","find","form","FORM_TYPE_IDS","contingencyRemoval","formId","isOpen","Boolean","redirectUrl","OFFER_STEPS","confirmTransfer","IconButton","color","onClick","event","currentTarget","sx","fontSize","Menu","keepMounted","open","onClose","MenuItem","to","Typography","variant","TableHeaderCell","withStyles","theme","root","fontWeight","TableCell","useStyles","makeStyles","widget","marginBottom","spacing","description","typography","h5","palette","primary","gray","table","fontFamily","avenirLT","cell","height","breakpoints","up","border","ContingenciesTable","contingencies","isBuyer","classes","_isEmpty","isRemovable","canRemoveContingency","Widget","className","title","Table","TableHead","TableRow","padding","align","TableBody","map","contingency","hasAction","checkDisabledContingencyAction","key","dueDate","status","USER_ROLES","loading","backgroundColor","common","white","minHeight","structuredSelector","createStructuredSelector","buyerOffers","state","isBuyerLoading","buyerError","sellerOffers","selectOffers","isSellerLoading","sellerError","mapDispatchToProps","getBuyerOffers","getSellerOffers","connect","withErrorBoundary","role","user","getRole","useContext","UserContext","useEffect","error","message","toastr","OFFER_ERROR_MESSAGES","fetchFailure","isLoading","offers","isEmpty","tag","blocking","loader","active","type","clsx","reduce","acc","isOfferContingencies","mappingOfferContingencies","displayContingencies"],"mappings":"scAuDeA,EAzCM,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MACtB,EAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,IAAKL,EAAO,CAAC,YAEvBM,EAAcD,IAAKL,EAAO,CAAC,UAAUO,MACzC,SAAAC,GAAI,OAAIH,IAAKG,EAAM,CAAC,iBAAmBC,KAAcC,sBAEjDC,EAASN,IAAKC,EAAa,CAAC,WAU5BM,EAASC,QAAQX,GACjBY,EAAW,yBAAqBV,EAArB,iBAAqCW,KAAYC,gBAAjD,mBAA2EL,GAE5F,OACE,oCACE,kBAACM,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAbR,SAAAC,GACtBjB,EAAYiB,EAAMC,iBAad,kBAAC,IAAD,CAAgBC,GAAI,CAAEC,SAAU,aAElC,kBAACC,EAAA,EAAD,CACEtB,SAAUA,EACVuB,aAAW,EACXC,KAAMd,EACNe,QAhBmB,WACvBxB,EAAY,QAiBR,kBAACyB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAIf,GACR,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,MAApB,eC1BNC,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CAC3CC,KAAM,CACJC,WAAY,WAFQH,CAIpBI,KAEEC,EAAYC,aAAW,SAAAL,GAAK,MAAK,CACrCM,OAAQ,CACNC,aAAcP,EAAMQ,QAAQ,IAE9BC,YAAY,2BACPT,EAAMU,WAAWC,IADX,IAETJ,aAAcP,EAAMQ,QAAQ,GAC5BxB,MAAOgB,EAAMY,QAAQC,QAAQC,OAE/BC,MAAO,CACLC,WAAYhB,EAAMU,WAAWM,WAAWC,UAE1CC,KAAK,aACHC,OAAQnB,EAAMQ,QAAQ,IACrBR,EAAMoB,YAAYC,GAAG,MAAQ,CAC5BC,OAAQ,aAwECC,EA7DY,SAAC,GAIoB,IAH9CC,EAG6C,EAH7CA,cACA1D,EAE6C,EAF7CA,MACA2D,EAC6C,EAD7CA,QAEMC,EAAUtB,IAEhB,GAAIuB,IAASH,IAAkBG,IAAS7D,GAAQ,OAAO,qCAEvD,IAAM8D,EAAcC,YAAqB/D,GACzC,OACE,kBAACgE,EAAA,EAAD,CAAQC,UAAWL,EAAQpB,OAAQ0B,MAAM,wBACvC,yBAAKD,UAAWL,EAAQjB,aAAxB,wCACwC,IACtC,gCAAStC,IAAKL,EAAO,oCAAqC,MAE5D,kBAACmE,EAAA,EAAD,CAAOF,UAAWL,EAAQX,OACxB,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACrC,EAAD,CAAiBsC,QAAQ,QAAzB,QACA,kBAACtC,EAAD,CAAiBsC,QAAQ,QAAzB,YACA,kBAACtC,EAAD,CAAiBsC,QAAQ,QAAzB,UACCX,GACC,kBAAC3B,EAAD,CAAiBsC,QAAQ,OAAOC,MAAM,SAAtC,YAMN,kBAACC,EAAA,EAAD,KACGd,EAAce,KAAI,SAAAC,GACjB,IAAMC,EACJb,IAAgBc,YAA+BF,GACjD,OACE,kBAACL,EAAA,EAAD,CAAUQ,IAAKH,EAAYR,OACzB,kBAAC7B,EAAA,EAAD,CAAW4B,UAAWL,EAAQR,KAAMkB,QAAQ,QACzCI,EAAYR,OAEf,kBAAC7B,EAAA,EAAD,CAAW4B,UAAWL,EAAQR,KAAMkB,QAAQ,QACzCI,EAAYI,SAAW,OAE1B,kBAACzC,EAAA,EAAD,CAAW4B,UAAWL,EAAQR,KAAMkB,QAAQ,QACzCI,EAAYK,QAAU,OAExBpB,GAAWgB,GACV,kBAACtC,EAAA,EAAD,CACE4B,UAAWL,EAAQR,KACnBkB,QAAQ,OACRC,MAAM,SAEN,kBAAC,EAAD,CAAcvE,MAAOA,aC9F5BgF,EACJ,QADIA,EAEH,S,SCuBJ1C,EAAYC,aAAW,SAAAL,GAAK,MAAK,CACrC+C,QAAS,CACPzB,OAAQ,oBACR0B,gBAAiBhD,EAAMY,QAAQqC,OAAOC,MACtCC,UAAW,aAwDTC,EAAqBC,YAAyB,CAClDC,YAAa,SAAAC,GAAK,OAAIpF,IAAKoF,EAAO,CAAC,aAAc,UAAW,KAC5DC,eAAgB,SAAAD,GAAK,OAAIpF,IAAKoF,EAAO,CAAC,aAAc,eACpDE,WAAY,SAAAF,GAAK,OAAIpF,IAAKoF,EAAO,CAAC,aAAc,SAAU,KAC1DG,aAAcC,IACdC,gBAAiB,SAAAL,GAAK,OAAIpF,IAAKoF,EAAO,CAAC,eAAgB,eACvDM,YAAa,SAAAN,GAAK,OAAIpF,IAAKoF,EAAO,CAAC,cAAe,SAAU,OAGxDO,EAAqB,CACzBC,mBACAC,qBAGcC,4BACdb,EACAU,EAFcG,CAGdC,aArEoB,SAAC,GASQ,IAR7BH,EAQ4B,EAR5BA,eACAT,EAO4B,EAP5BA,YACAE,EAM4B,EAN5BA,eACAC,EAK4B,EAL5BA,WACAO,EAI4B,EAJ5BA,gBACAN,EAG4B,EAH5BA,aACAE,EAE4B,EAF5BA,gBACAC,EAC4B,EAD5BA,YAEMnC,EAAUtB,IAEV+D,EDxCe,SAACC,GACtB,IAAM3C,EAAUtD,IAAKiG,EAAM,WAAW,GAGtC,OAFiBjG,IAAKiG,EAAM,YAAY,GAEnBtB,EACjBrB,EAAgBqB,EACb,GCkCMuB,CADAC,qBAAWC,MAElB9C,EAAU0C,IAASrB,EAkBzB,GAhBA0B,qBAAU,WACHL,IACL1C,EAAUsC,IAAmBC,OAE5B,CAACG,IAEJK,qBAAU,WACR,GAAKL,EAAL,CACA,IAAMM,EAAQhD,EAAUgC,EAAaI,EAC/Ba,EAAUvG,IAAKsG,EAAO,UAAW,IACnCC,GACFC,SAAOF,MAAMG,IAAqBC,aAAcH,MAGjD,CAACP,EAAMV,EAAYI,KAEjBM,EAAM,OAAO,qCAElB,IAAMW,EAAYtB,GAAkBI,EAC9BmB,EAAStD,EAAU6B,EAAcI,EAEvC,OAAIsB,IAAQD,KAAYD,EAAkB,qCAGxC,kBAAC,IAAD,CACEG,IAAI,MACJC,SAAUJ,EACVK,OAAQ,kBAAC,SAAD,CAAQC,QAAM,EAACC,KAAK,aAAarG,MAAM,sBAC/C+C,UAAWuD,YAAK,eACb5D,EAAQqB,QAAU+B,KD/DS,SAClCC,EACAtD,GAEA,OAAOsD,EAAOQ,QAAO,SAACC,EAAK1H,GAIzB,KAFE2H,YAAqB3H,KAAW6D,IAASxD,IAAKL,EAAO,CAAC,oBAE1C,OAAO0H,EAErB,IAAMhE,EAAgBkE,YAA0B5H,GAChD,MAAM,GAAN,mBACK0H,GADL,CAEE,kBAAC,EAAD,CACE7C,IAAKxE,IAAKL,EAAO,CAAC,YAClBA,MAAOA,EACP0D,cAAeA,EACfC,QAASA,QAGZ,IC8CEkE,CAAqBZ,EAAQtD","file":"static/js/11.bbec93db.chunk.js","sourcesContent":["// @flow\nimport React, { useState, Fragment } from 'react';\nimport type { Element } from 'react';\nimport { IconButton, Menu, MenuItem, Typography } from '@material-ui/core';\nimport _get from 'lodash/get';\nimport { FORM_TYPE_IDS, OFFER_STEPS } from 'shared/Consts';\nimport type { Offer } from 'types/Offer';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  offer: Offer,\n};\n\nconst ActionButton = ({ offer }: Props): Element<typeof Fragment> => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const offerId = _get(offer, ['OfferId']);\n\n  const removalForm = _get(offer, ['Forms']).find(\n    form => _get(form, ['FormTypeId']) === FORM_TYPE_IDS.contingencyRemoval,\n  );\n  const formId = _get(removalForm, ['FormId']);\n\n  const onClickOpenMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const onClickCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const isOpen = Boolean(anchorEl);\n  const redirectUrl = `/offer?offerId=${offerId}&step=${OFFER_STEPS.confirmTransfer}&formId=${formId}`;\n\n  return (\n    <>\n      <IconButton color=\"primary\" onClick={onClickOpenMenu}>\n        <VisibilityIcon sx={{ fontSize: '1.3rem' }} />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={isOpen}\n        onClose={onClickCloseMenu}\n      >\n        <MenuItem>\n          <Link to={redirectUrl}>\n            <Typography variant=\"h4\">Remove</Typography>\n          </Link>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default ActionButton;\n","// @flow\nimport React, { Fragment } from 'react';\nimport type { Element } from 'react';\nimport { Widget } from 'components/Widget';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport _isEmpty from 'lodash/isEmpty';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from '@material-ui/core';\nimport type { Offer } from 'types/Offer';\nimport _get from 'lodash/get';\nimport {\n  canRemoveContingency,\n  checkDisabledContingencyAction,\n} from 'helpers/Offer';\nimport ActionButton from './ActionButton';\n\nconst TableHeaderCell = withStyles(theme => ({\n  root: {\n    fontWeight: 'bold',\n  },\n}))(TableCell);\n\nconst useStyles = makeStyles(theme => ({\n  widget: {\n    marginBottom: theme.spacing(3),\n  },\n  description: {\n    ...theme.typography.h5,\n    marginBottom: theme.spacing(3),\n    color: theme.palette.primary.gray,\n  },\n  table: {\n    fontFamily: theme.typography.fontFamily.avenirLT,\n  },\n  cell: {\n    height: theme.spacing(6),\n    [theme.breakpoints.up('md')]: {\n      border: 'none',\n    },\n  },\n}));\n\ntype Props = {\n  contingencies: Object[],\n  offer: Offer,\n  isBuyer: boolean,\n};\n\nconst ContingenciesTable = ({\n  contingencies,\n  offer,\n  isBuyer,\n}: Props): Element<'div' | typeof Fragment> => {\n  const classes = useStyles();\n\n  if (_isEmpty(contingencies) || _isEmpty(offer)) return <></>;\n\n  const isRemovable = canRemoveContingency(offer);\n  return (\n    <Widget className={classes.widget} title=\"Contingencies status\">\n      <div className={classes.description}>\n        Contingencies status of your property{' '}\n        <strong>{_get(offer, 'Property.PropertyData.FullAddress', '')}</strong>\n      </div>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableHeaderCell padding=\"none\">Type</TableHeaderCell>\n            <TableHeaderCell padding=\"none\">Due Date</TableHeaderCell>\n            <TableHeaderCell padding=\"none\">Status</TableHeaderCell>\n            {isBuyer && (\n              <TableHeaderCell padding=\"none\" align=\"right\">\n                Action\n              </TableHeaderCell>\n            )}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {contingencies.map(contingency => {\n            const hasAction =\n              isRemovable && !checkDisabledContingencyAction(contingency);\n            return (\n              <TableRow key={contingency.title}>\n                <TableCell className={classes.cell} padding=\"none\">\n                  {contingency.title}\n                </TableCell>\n                <TableCell className={classes.cell} padding=\"none\">\n                  {contingency.dueDate || 'n/a'}\n                </TableCell>\n                <TableCell className={classes.cell} padding=\"none\">\n                  {contingency.status || 'n/a'}\n                </TableCell>\n                {isBuyer && hasAction && (\n                  <TableCell\n                    className={classes.cell}\n                    padding=\"none\"\n                    align=\"right\"\n                  >\n                    <ActionButton offer={offer} />\n                  </TableCell>\n                )}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Widget>\n  );\n};\nexport default ContingenciesTable;\n","// @flow\nimport React from 'react';\nimport type { Element } from 'react';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport ContingenciesTable from './ContingenciesTable';\nimport { mappingOfferContingencies, isOfferContingencies } from 'helpers/Offer';\nimport type { Offer } from 'types/Offer';\n\nexport const USER_ROLES = {\n  BUYER: 'buyer',\n  SELLER: 'seller',\n};\n\nexport const getRole = (user: Object): string => {\n  const isBuyer = _get(user, 'IsBuyer', false);\n  const isSeller = _get(user, 'IsSeller', false);\n\n  if (isSeller) return USER_ROLES.SELLER;\n  if (isBuyer) return USER_ROLES.BUYER;\n  return '';\n};\n\nexport const displayContingencies = (\n  offers: Array<Offer>,\n  isBuyer: boolean,\n): Array<Element<Object>> => {\n  return offers.reduce((acc, offer) => {\n    const isValid =\n      isOfferContingencies(offer) && !_isEmpty(_get(offer, ['Contingencies']));\n\n    if (!isValid) return acc;\n\n    const contingencies = mappingOfferContingencies(offer);\n    return [\n      ...acc,\n      <ContingenciesTable\n        key={_get(offer, ['OfferId'])}\n        offer={offer}\n        contingencies={contingencies}\n        isBuyer={isBuyer}\n      />,\n    ];\n  }, []);\n};\n","// @flow\nimport React, { useEffect, useContext } from 'react';\nimport type { Element } from 'react';\nimport { withErrorBoundary } from 'components/ErrorBoundary';\nimport { getAllOffers as getBuyerOffers } from 'containers/BuyerOffer/redux/Actions';\nimport { fetchOffers as getSellerOffers } from 'containers/SellerOffer/redux/Actions';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport _get from 'lodash/get';\nimport { Loader } from 'react-loaders';\nimport BlockUi from 'react-block-ui';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport UserContext from 'contexts/UserContext';\nimport { toastr } from 'react-redux-toastr';\nimport { OFFER_ERROR_MESSAGES } from 'shared/Messages';\nimport { USER_ROLES, getRole, displayContingencies } from './helper';\nimport { selectOffers } from 'containers/SellerOffer/redux/Selector';\nimport isEmpty from 'lodash/isEmpty';\n\ntype PropsWithoutRedux = {};\n\ntype Props = {\n  ...PropsWithoutRedux,\n  getBuyerOffers: Function,\n  buyerOffers: Array<Object>,\n  isBuyerLoading: boolean,\n  buyerError: Object,\n  getSellerOffers: Function,\n  sellerOffers: Array<Object>,\n  isSellerLoading: boolean,\n  sellerError: Object,\n};\n\nconst useStyles = makeStyles(theme => ({\n  loading: {\n    border: '1px solid #E0E0E0',\n    backgroundColor: theme.palette.common.white,\n    minHeight: '100px',\n  },\n}));\n\nconst Contingencies = ({\n  getBuyerOffers,\n  buyerOffers,\n  isBuyerLoading,\n  buyerError,\n  getSellerOffers,\n  sellerOffers,\n  isSellerLoading,\n  sellerError,\n}: Props): Element<Object> => {\n  const classes = useStyles();\n  const user = useContext(UserContext);\n  const role = getRole(user);\n  const isBuyer = role === USER_ROLES.BUYER;\n\n  useEffect(() => {\n    if (!role) return;\n    isBuyer ? getBuyerOffers() : getSellerOffers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [role]);\n\n  useEffect(() => {\n    if (!role) return;\n    const error = isBuyer ? buyerError : sellerError;\n    const message = _get(error, 'message', '');\n    if (message) {\n      toastr.error(OFFER_ERROR_MESSAGES.fetchFailure, message);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [role, buyerError, sellerError]);\n\n  if (!role) return <></>;\n\n  const isLoading = isBuyerLoading || isSellerLoading;\n  const offers = isBuyer ? buyerOffers : sellerOffers;\n\n  if (isEmpty(offers) && !isLoading) return <></>;\n\n  return (\n    <BlockUi\n      tag=\"div\"\n      blocking={isLoading}\n      loader={<Loader active type=\"ball-pulse\" color=\"rgba(231,28,99,1)\" />}\n      className={clsx({\n        [classes.loading]: isLoading,\n      })}\n    >\n      {displayContingencies(offers, isBuyer)}\n    </BlockUi>\n  );\n};\n\nconst structuredSelector = createStructuredSelector({\n  buyerOffers: state => _get(state, ['buyerOffer', 'offers'], []),\n  isBuyerLoading: state => _get(state, ['buyerOffer', 'isLoading']),\n  buyerError: state => _get(state, ['buyerOffer', 'error'], {}),\n  sellerOffers: selectOffers,\n  isSellerLoading: state => _get(state, ['sellerOffers', 'isLoading']),\n  sellerError: state => _get(state, ['sellerOffer', 'error'], {}),\n});\n\nconst mapDispatchToProps = {\n  getBuyerOffers,\n  getSellerOffers,\n};\n\nexport default (connect(\n  structuredSelector,\n  mapDispatchToProps,\n)(withErrorBoundary(Contingencies)): Element<PropsWithoutRedux>);\n"],"sourceRoot":""}